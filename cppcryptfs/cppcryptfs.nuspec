<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>cppcryptfs</id>
    <version>1.4.3.8</version>
    <packageSourceUrl>https://github.com/yingziwu/choco/tree/master/cppcryptfs</packageSourceUrl>
    <owners>BGME</owners>
    <title>cppcryptfs (Install)</title>
    <authors>Bailey Brown</authors>
    <projectUrl>https://github.com/bailey27/cppcryptfs/</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/bailey27/cppcryptfs/master/cppcryptfs/res/cppcryptfs.ico</iconUrl>
    <copyright>Bailey Brown</copyright>
    <licenseUrl>https://github.com/bailey27/cppcryptfs/blob/master/LICENSE.txt</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/bailey27/cppcryptfs</projectSourceUrl>
    <bugTrackerUrl>https://github.com/bailey27/cppcryptfs/issues</bugTrackerUrl>
    <summary>cppcryptfs is an implementation of the gocryptfs encrypted overlay filesystem in C++ for Windows.</summary>
    <description>---
![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)
==============

cppcryptfs
------

cppcryptfs is based on the design of [gocryptfs](https://github.com/rfjakob/gocryptfs), an encrypted overlay filesystem written in Go.

cppcryptfs is an implementation of the gocryptfs filesystem in C++ for Windows.  cppcryptfs is compatible with gocryptfs.  Filesystems created with one can generally be mounted (and synced) with the other.   Please see the statement on compatibility near the end of this document.

cppcrypts provides on-the-fly, at-rest and in-the-cloud encryption of files and file names in a virtual filesystem.  It uses the [Dokany](https://github.com/dokan-dev/dokany) driver and library to provide a virtual fileystem in user mode under Windows.


You can use cppcryptfs to create an encrypted filesystem in a folder.  The encrypted filesystem is protected with a password that you choose.  

When you use cppcryptfs to mount the encrypted filesystem by providing the password, then you have a new drive letter in Windows.  This virtual drive letter gives you an unencrypted view of your files.  The encryption and decryption are done on the fly and are transparent to applications that use the files on that virtual drive.

After you tell cppcryptfs to dismount the virtual drive letter, then there is no way to get at your unencrypted data unless the filesystem is re-mounted again using your password.  

Shutting down your computer automatically dismounts all cppcryptfs drive letters.

If the folder where the encrypted files are kept is being synced with a cloud service, then only the encrypted files with encrypted file names will be uploaded to the cloud service.

This way, neither the employees of the cloud service nor anybody who hacks into the cloud service can use your files.

Also, if someone steals your computer and the encrypted filesystem is not mounted, then the thief cannot use your files.

Because the encryption is done on a per-file basis instead of using a container file to store the data, you do not have to decide ahead of time how much encrypted storage you will need.  cppcryptfs has very minimal storage overhead, and your encrypted filesystem can grow dynamically limited only by the amount of free space on the physical drive on which the encrypted filesystem is located.

Another advantage of per-file encryption over container-based encryption is that per-file encryption syncs very quickly and efficiently with cloud-based services.

---</description>
    <releaseNotes>https://github.com/bailey27/cppcryptfs/blob/master/changelog.md</releaseNotes>

    <dependencies>
      <dependency id="dokany" version="1.5.0.3000" />
    </dependencies>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
